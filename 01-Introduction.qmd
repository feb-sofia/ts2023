---
title: "Introduction to time series analysis"
author: "Boyko Amarov"
date: "10/12/2021"
output: html_document
---

# Introduction to time series analysis

## Some examples of time series

```{r}
# Packages

# install.packages(
#   c(
#     "quantmod",
#     "tidyverts",
#     "tidyverse",
#     "xts",
#     "urca"
#   )
# )
```


```{r}
library(tidyverse)
library(xts)
library(quantmod)
library(tsibble)

bitcoin_r <- getSymbols("BTC-USD", from="2015-01-01", src="yahoo", periodicity="daily", env = NULL)

bikes_r <-
  read_csv("https://raw.githubusercontent.com/feb-sofia/ts2023/main/data/bike-sharing/day.csv") |>
  select(instant, dteday, casual, registered, cnt)

electr_r <- read_csv("https://raw.githubusercontent.com/feb-sofia/ts2023/main/data/electricity/bg_internal_consumption.csv") |>
  mutate(
    electr = as.numeric(electr)
  ) |>
  filter(!is.na(electr))
```
### XTS

```{r}
bikes <- xts(bikes_r, order.by = as.Date(bikes_r$dteday))
```

```{r}
electr <- xts(electr_r, order.by = as.yearmon(electr_r$month))
```

The Bitcoin-USD exchange rate is already a `xts` object.


### Tsibble

An extension of `tibble` for time series objects.


```{r}
electr_ts <- electr_r |>
  mutate(
    month = yearmonth(month)
  ) |>
  as_tsibble(index = month)
```

```{r}
electr_ts |> autoplot(electr)
```

- Plot the time series


```{r}
plot(bc_ts)
```


Homework: provide a brief description of the main patterns visible in the time
series plot

- Compute the average exchange rate over the whole observation period

```{r}
## Compute the global mean of the series
```
- Compute the average exchange rate for June 2017. Use the subset syntax of `xts` to select the observations for June
2017, then apply the `mean` function. For more information on using `xts`, have a look at this [cheat sheet](http://datacamp-community-prod.s3.amazonaws.com/72771032-0653-4d87-a798-4a83879e99c8) and at the [online documentation](https://rdrr.io/cran/xts/f/inst/doc/xts.pdf) of the package.

```{r}
## Subset the time series, then apply the mean function
## Use the default date format: YYYY-MM-DD
```

- Compute the average exchange rate for October 2017

```{r}
## Same as for June 2017
```

- Compute the average exchange rate before (and including) and after October 2017

```{r}
```
```{r}
```
- Compute the standard deviation for the four periods

What does the standard deviation measure?
It measures how much the daily exchange rates vary around their mean: volatility (variation).

```{r}
## Subset the time series, then apply the sd function (which computes the standard deviation)
```

```{r}
## Same as for June 2017
```

```{r}
```

```{r}
```

- Compute the average exchange rate for every week during the observation period

```{r}
```


- Compute the standard deviation of the exchange rate for every week during the observation period

```{r}
```

### Deterministic processes

- Geometric growth

$$
x_{t} = r x_{t - 1} \\
x_0 = 10 \\
r = 1.1 \\
$$

$$
\begin{align}
y_0 & = 10 \\
y_1 &= 1.1 \times 10 \\
y_2 &= 1.1 \times (1.1 \times 10) = 1.1^2 \times 10 \\
y_3 &= 1.1^3 \times 10 \\
\vdots \\
y_t = 1.1^{t} \times 10
\end{align}
$$

```{r}
dt_geom <- tibble(
  tm = 0:10,
  y = 1.1^tm * 10
)

dt_geom |>
  ggplot(aes(x = tm, y = y)) + 
  geom_line()
```

$$
y_0 = 10\\
r = 0.2
$$

```{r}
dt_geom <- tibble(
  tm = 0:10,
  y = 0.2^tm * 10
)

dt_geom |>
  ggplot(aes(x = tm, y = y)) + 
  geom_line()
```



### Purely random process

What is a good prediction?

```{r}
e <- rnorm(100, mean = 0, sd = 2)

sum((e - (1))^2) / 100
sum((e - 0)^2) / 100
```

Sample update...

